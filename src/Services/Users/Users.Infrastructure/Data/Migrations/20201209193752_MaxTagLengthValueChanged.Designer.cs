// <auto-generated />
using Lounge.Services.Users.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Lounge.Services.Users.Infrastructure.Data.Migrations
{
    [DbContext(typeof(UsersContext))]
    [Migration("20201209193752_MaxTagLengthValueChanged")]
    partial class MaxTagLengthValueChanged
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.HasSequence("rseq")
                .IncrementsBy(10);

            modelBuilder.Entity("Lounge.Services.Users.Models.ConnectionEntities.Connection", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OtherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("Relationship")
                        .HasColumnType("int");

                    b.HasKey("UserId", "OtherId");

                    b.HasIndex("OtherId");

                    b.ToTable("UserConnections");
                });

            modelBuilder.Entity("Lounge.Services.Users.Models.RoomEntities.Member", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoomId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomMembers");
                });

            modelBuilder.Entity("Lounge.Services.Users.Models.RoomEntities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseHiLo("rseq");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasDiscriminator<int>("Type").HasValue(1);
                });

            modelBuilder.Entity("Lounge.Services.Users.Models.UserEntities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Tag")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Lounge.Services.Users.Models.RoomEntities.GroupRoom", b =>
                {
                    b.HasBaseType("Lounge.Services.Users.Models.RoomEntities.Room");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("OwnerId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Lounge.Services.Users.Models.ConnectionEntities.Connection", b =>
                {
                    b.HasOne("Lounge.Services.Users.Models.UserEntities.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lounge.Services.Users.Models.UserEntities.User", null)
                        .WithMany("Connections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OtherUser");
                });

            modelBuilder.Entity("Lounge.Services.Users.Models.RoomEntities.Member", b =>
                {
                    b.HasOne("Lounge.Services.Users.Models.RoomEntities.Room", "Room")
                        .WithMany("Members")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lounge.Services.Users.Models.UserEntities.User", "User")
                        .WithMany("PrivateRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lounge.Services.Users.Models.UserEntities.User", b =>
                {
                    b.OwnsOne("Lounge.Services.Users.Models.UserEntities.Settings", "Settings", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Theme")
                                .HasColumnType("int");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Lounge.Services.Users.Models.RoomEntities.GroupRoom", b =>
                {
                    b.HasOne("Lounge.Services.Users.Models.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Lounge.Services.Users.Models.RoomEntities.Room", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Lounge.Services.Users.Models.UserEntities.User", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("PrivateRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
